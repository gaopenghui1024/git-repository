<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出   -->

<!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
				当scan为true时，此属性生效。默认的时间间隔为1分钟 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--设置上下文名称,一旦设置不能修改  -->
    <contextName>logback</contextName>
    <!--该变量用来配置日志文件的路径  -->
    <property name="log.path" value="/logs/iwms" />
    <!-- 该变量代表日志文件名 -->
    <property name="log.file" value="logback.log" />

    <!--输出控制台///appender用来格式化日志输出节点class用来指定哪种输出策略-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--%d{HH: mm:ss.SSS}——日志输出时间
            	%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            	%-5level——日志级别，并且使用5个字符靠左对齐
            	%logger{36}——日志输出者的名字
            	%msg——日志消息
            	%n——平台的换行符  -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!-- 输出到文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
       <!--<file>${log.path}/info/${log.file}</file>-->
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中-->
            <fileNamePattern>${log.path}/info/logback.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--表示只保留最近30天的日志  -->
            <maxHistory>30</maxHistory>
            <!--指定日志文件的上限大小,到了这个值，就会删除旧的日志  -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
       <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
           <maxFileSize>5MB</maxFileSize>
       </triggeringPolicy>-->
        <!--日志文件输出格式  -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
             <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--错误日志统一输出到这里-->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${log.path}/error/${log.file}</file>-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--设置日志级别,只输入error日志-->
            <level>ERROR</level>
            <!--用于配置符合过滤条件的操作-->
            <onMatch>ACCEPT</onMatch>
            <!--用于配置不符合过滤条件的操作-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${log.path}/error/error.logback.%d{yyyy-MM-dd_HH}.log</FileNamePattern>
            <!--表示只保留最近30天的日志  -->
            <maxHistory>30</maxHistory>
            <!--指定日志文件的上限大小,到了这个值，就会删除旧的日志  -->
            <totalSizeCap>10MB</totalSizeCap>
        </rollingPolicy>
        <!--格式化输出-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

	<!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性  -->
	<!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
				不能设置为INHERITED或者同义词NULL，默认是DEBUG  -->
    <root level="info">
        <!-- 输出控制台的name -->
        <appender-ref ref="console" />
        <!--输出文件的name  -->
        <appender-ref ref="file" />
        <appender-ref ref="error" />
    </root>

    <!-- 将控制mf包下的所有类的日志的打印,如果不设置level,他会自动继承他的上级<root>的日志级别info -->
    <!-- 设置addtivity是因为这里已经指定了appender，如果再向上传递就会被root下的appender再次打印 -->

    <!--<logger name="com.mf.repository" level="DEBUG" additivity="false">
        <appender-ref ref="console" />
        <appender-ref ref="file" />
    </logger>-->

    <!-- 1. 输出SQL 到控制台和文件-->
     <logger name="org.hibernate.SQL" level="DEBUG" additivity="false" >
        <appender-ref ref="file" />
        <appender-ref ref="console" />
    </logger>

       <!-- 2. 输出SQL 的参数到控制台和文件-->
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" additivity="false" >
        <appender-ref ref="file" />
        <appender-ref ref="console" />
    </logger>

</configuration>